// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	CollectTiDB(ctx context.Context, opts ...grpc.CallOption) (Agent_CollectTiDBClient, error)
	CollectTiKV(ctx context.Context, opts ...grpc.CallOption) (Agent_CollectTiKVClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) CollectTiDB(ctx context.Context, opts ...grpc.CallOption) (Agent_CollectTiDBClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/Agent/CollectTiDB", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentCollectTiDBClient{stream}
	return x, nil
}

type Agent_CollectTiDBClient interface {
	Send(*CPUTimeRequestTiDB) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type agentCollectTiDBClient struct {
	grpc.ClientStream
}

func (x *agentCollectTiDBClient) Send(m *CPUTimeRequestTiDB) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentCollectTiDBClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) CollectTiKV(ctx context.Context, opts ...grpc.CallOption) (Agent_CollectTiKVClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/Agent/CollectTiKV", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentCollectTiKVClient{stream}
	return x, nil
}

type Agent_CollectTiKVClient interface {
	Send(*CPUTimeRequestTiKV) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type agentCollectTiKVClient struct {
	grpc.ClientStream
}

func (x *agentCollectTiKVClient) Send(m *CPUTimeRequestTiKV) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentCollectTiKVClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	CollectTiDB(Agent_CollectTiDBServer) error
	CollectTiKV(Agent_CollectTiKVServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) CollectTiDB(Agent_CollectTiDBServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectTiDB not implemented")
}
func (UnimplementedAgentServer) CollectTiKV(Agent_CollectTiKVServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectTiKV not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_CollectTiDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).CollectTiDB(&agentCollectTiDBServer{stream})
}

type Agent_CollectTiDBServer interface {
	Send(*Empty) error
	Recv() (*CPUTimeRequestTiDB, error)
	grpc.ServerStream
}

type agentCollectTiDBServer struct {
	grpc.ServerStream
}

func (x *agentCollectTiDBServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentCollectTiDBServer) Recv() (*CPUTimeRequestTiDB, error) {
	m := new(CPUTimeRequestTiDB)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_CollectTiKV_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).CollectTiKV(&agentCollectTiKVServer{stream})
}

type Agent_CollectTiKVServer interface {
	Send(*Empty) error
	Recv() (*CPUTimeRequestTiKV, error)
	grpc.ServerStream
}

type agentCollectTiKVServer struct {
	grpc.ServerStream
}

func (x *agentCollectTiKVServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentCollectTiKVServer) Recv() (*CPUTimeRequestTiKV, error) {
	m := new(CPUTimeRequestTiKV)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectTiDB",
			Handler:       _Agent_CollectTiDB_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CollectTiKV",
			Handler:       _Agent_CollectTiKV_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}
